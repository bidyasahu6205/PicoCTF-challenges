Description
The Multiverse is within your grasp! Unfortunately, the server that contains the secrets of the multiverse is in a universe where keyboards only have numbers and (most) symbols.
Additional details will be available after launching your challenge instance.
ssh -p 59404 ctf-player@mimas.picoctf.net
Use password: 6dd28e9b

Hint: Where can you get some letters?

diva_bs-picoctf@webshell:~$ ssh -p 59404 ctf-player@mimas.picoctf.net
The authenticity of host '[mimas.picoctf.net]:59404 ([52.15.88.75]:59404)' can't be established.
ED25519 key fingerprint is SHA256:n/hDgUtuTTF85Id7k2fxmHvb6rrLrACHNM6xLZ46AqQ.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '[mimas.picoctf.net]:59404' (ED25519) to the list of known hosts.
ctf-player@mimas.picoctf.net's password: 
Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 6.5.0-1016-aws x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

This system has been minimized by removing packages and content that are
not required on a system that users do not log into.

To restore this content, you can run the 'unminimize' command.

The programs included with the Ubuntu system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.

SansAlpha$ ls
SansAlpha: Unknown character detected

- we connected to SSH ( SSH(Secure Shell) is a network protocol that provides a secure way to access and manage remote devices over an unsecured network.)
and gave the password we open a terminal 
- when i tried to list files and directory it say unkown character detected
- then i researched what other way can we use to communicate with a terminal.
- there is something called wildcard caracters in Unix/linux.
-In Linux, a wildcard is a special character used in the shell to represent one or more characters in file and directory names. Wildcards make it easier to perform operations on multiple files at once without typing out each name individually.
-some of the examples are 
1. * (Asterisk):
  - Represents zero or more characters in a filename.
  - Example: *.txt matches all files with a .txt extension, such as file.txt, notes.txt, etc.
2. ? (Question Mark):
  - Represents exactly one character.
  - Example: file?.txt matches file1.txt, fileA.txt, but not file10.txt.
3. [] (Square Brackets):
  - Represents any one of the enclosed characters.
  - Example: file[12].txt matches file1.txt and file2.txt.
4. [!...] (Negation in Square Brackets):
  - Matches any character not enclosed in the brackets.
  - Example: file[!12].txt matches file3.txt, fileA.txt, but not file1.txt or file2.txt.
5. {} (Curly Braces):
  - Used to specify a comma-separated list of alternatives.
  - Example: file{1,2}.txt matches file1.txt and file2.txt.

-Now I use them to check all the files and directories available.

SansAlpha$ ./?
bash: ./?: No such file or directory

SansAlpha$ ./??
bash: ./??: No such file or directory

SansAlpha$ ./???
bash: ./???: No such file or directory

SansAlpha$ ./????
bash: ./????: No such file or directory

SansAlpha$ ./?????
bash: ./?????: No such file or directory

SansAlpha$ ./??????
bash: ./blargh: Is a directory

SansAlpha$ ./??????/*
bash: ./blargh/flag.txt: Permission denied

- Seems like i am in a directory called blargh and there is a file that cmay contain the flag 

SansAlpha$ /?
bash: /?: No such file or directory

SansAlpha$ /??
bash: /??: No such file or directory

SansAlpha$ /???
bash: /bin: Is a directory

SansAlpha$ /????
bash: /boot: Is a directory

SansAlpha$ /?????
bash: /lib32: Is a directory

SansAlpha$ /??????
bash: /libx32: Is a directory

SansAlpha$ /???????
bash: /???????: No such file or directory

- Now i fond few directories present are
  > bin
  > boot
  > lib32
  > libx32
The /bin directory in Linux is one of the essential directories in the file system hierarchy.
It contains binary executables that are necessary for the system to function, especially in single-user mode or when other filesystems are not yet mounted.
These binaries are generally the basic commands and utilities that are required for the system's operation, such as:
ls, cp, mv, rm, cat, echo, bash, sh, base64, awk etc
I assign the value "bin/base64" to a variable _1 and then use it to command the linux to give the base64 encryption of the flag.txt

SansAlpha$ _1=(/???/????64)
SansAlpha$ "${_1[0]}" */????.???
cmV0dXJuIDAgcGljb0NURns3aDE1X211MTcxdjNyNTNfMTVfbTRkbjM1NV8xNDUyNTZlY30=

Traceback (most recent call last):
  File "/usr/local/sansalpha.py", line 11, in <module>
    user_in = input("SansAlpha$ ")
  File "/usr/local/lib/python3.8/dist-packages/pwnlib/term/readline.py", line 448, in str_input
    return readline(-1, prompt, float).decode()
  File "/usr/local/lib/python3.8/dist-packages/pwnlib/term/readline.py", line 409, in readline
    control_c()
  File "/usr/local/lib/python3.8/dist-packages/pwnlib/term/readline.py", line 261, in control_c
    raise KeyboardInterrupt
KeyboardInterrupt
Connection to mimas.picoctf.net closed.

-Then I decoded the encryption I got and got the flag.

diva_bs-picoctf@webshell:~$ echo "cmV0dXJuIDAgcGljb0NURns3aDE1X211MTcxdjNyNTNfMTVfbTRkbjM1NV8xNDUyNTZlY30=" > f.txt
diva_bs-picoctf@webshell:~$ base64 -d f.txt                                               
return 0 picoCTF{7h15_mu171v3r53_15_m4dn355_145256ec}
diva_bs-picoctf@webshell:~$
