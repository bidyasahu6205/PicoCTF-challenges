Description
Can you crack the password to get the flag?
Download the password checker here and you'll need the encrypted flag and the hash in the same directory too.
There are 7 potential passwords with 1 being correct. You can find these by examining the password checker script.
diva_bs-picoctf@webshell:~$ wget https://artifacts.picoctf.net/c/17/level3.py
--2024-07-27 05:23:24--  https://artifacts.picoctf.net/c/17/level3.py
Resolving artifacts.picoctf.net (artifacts.picoctf.net)... 3.160.22.92, 3.160.22.43, 3.160.22.128, ...
Connecting to artifacts.picoctf.net (artifacts.picoctf.net)|3.160.22.92|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1337 (1.3K) [application/octet-stream]
Saving to: 'level3.py'

level3.py              100%[===========================>]   1.31K  --.-KB/s    in 0s      

2024-07-27 05:23:24 (58.2 MB/s) - 'level3.py' saved [1337/1337]

diva_bs-picoctf@webshell:~$ wget https://artifacts.picoctf.net/c/17/level3.flag.txt.enc
--2024-07-27 05:23:35--  https://artifacts.picoctf.net/c/17/level3.flag.txt.enc
Resolving artifacts.picoctf.net (artifacts.picoctf.net)... 3.160.22.43, 3.160.22.92, 3.160.22.128, ...
Connecting to artifacts.picoctf.net (artifacts.picoctf.net)|3.160.22.43|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 31 [application/octet-stream]
Saving to: 'level3.flag.txt.enc'

level3.flag.txt.enc    100%[===========================>]      31  --.-KB/s    in 0s      

2024-07-27 05:23:35 (1.57 MB/s) - 'level3.flag.txt.enc' saved [31/31]

diva_bs-picoctf@webshell:~$ wget https://artifacts.picoctf.net/c/17/level3.hash.bin
--2024-07-27 05:23:46--  https://artifacts.picoctf.net/c/17/level3.hash.bin
Resolving artifacts.picoctf.net (artifacts.picoctf.net)... 3.160.22.92, 3.160.22.128, 3.160.22.43, ...
Connecting to artifacts.picoctf.net (artifacts.picoctf.net)|3.160.22.92|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 16 [application/octet-stream]
Saving to: 'level3.hash.bin'

level3.hash.bin        100%[===========================>]      16  --.-KB/s    in 0s      

2024-07-27 05:23:46 (4.99 MB/s) - 'level3.hash.bin' saved [16/16]

diva_bs-picoctf@webshell:~$ ls
README.txt  level3.flag.txt.enc  level3.hash.bin  level3.py
diva_bs-picoctf@webshell:~$ python level3.py
Please enter correct password for flag: pas
That password is incorrect
diva_bs-picoctf@webshell:~$ nano level3.py
__________________________________________________________________________________________________________________________________
import hashlib

### THIS FUNCTION WILL NOT HELP YOU FIND THE FLAG --LT ########################
def str_xor(secret, key):
    #extend key to secret length
    new_key = key
    i = 0
    while len(new_key) < len(secret):
        new_key = new_key + key[i]
        i = (i + 1) % len(key)        
    return "".join([chr(ord(secret_c) ^ ord(new_key_c)) for (secret_c,new_key_c) in zip(se>
###############################################################################

flag_enc = open('level3.flag.txt.enc', 'rb').read()
correct_pw_hash = open('level3.hash.bin', 'rb').read()


def hash_pw(pw_str):
    pw_bytes = bytearray()
    pw_bytes.extend(pw_str.encode())
    m = hashlib.md5()
    m.update(pw_bytes)
    return m.digest()


def level_3_pw_check():
    user_pw = input("Please enter correct password for flag: ") # here we give the guessed password
    user_pw_hash = hash_pw(user_pw) #it creats the hash of the password given by us
    
    if( user_pw_hash == correct_pw_hash ):#checks if the provided password is correct or not if the password is correct it sends to the funtion that decrypt the flag
        print("Welcome back... your flag, user:")
        decryption = str_xor(flag_enc.decode(), user_pw) #function call to decrypt the flag and stores the result in the decryption variable
        print(decryption) #prints the decrypted flag
        return
    print("That password is incorrect")



level_3_pw_check()


# The strings below are 7 possibilities for the correct password. 
#   (Only 1 is correct)
pos_pw_list = ["f09e", "4dcf", "87ab", "dba8", "752e", "3961", "f159"] #we are given the possible passwords in this list
________________________________________________________________________________________________________________
import hashlib

### THIS FUNCTION WILL NOT HELP YOU FIND THE FLAG --LT ########################
def str_xor(secret, key):
    #extend key to secret length
    new_key = key
    i = 0
    while len(new_key) < len(secret):
        new_key = new_key + key[i]
        i = (i + 1) % len(key)        
    return "".join([chr(ord(secret_c) ^ ord(new_key_c)) for (secret_c,new_key_c) in zip(se>
###############################################################################

flag_enc = open('level3.flag.txt.enc', 'rb').read()
correct_pw_hash = open('level3.hash.bin', 'rb').read()


def hash_pw(pw_str):
    pw_bytes = bytearray()
    pw_bytes.extend(pw_str.encode())
    m = hashlib.md5()
    m.update(pw_bytes)
    return m.digest()


def level_3_pw_check():
    pos_pw_list = ["f09e", "4dcf", "87ab", "dba8", "752e", "3961", "f159"] #instead of taking an input we declared the list here
    for word in pos_pw_list: #here we go througheach password in the list one by one using a for loop and checking for each one of them. when we found the one we return.
        user_pw_hash = hash_pw(word) 
        if( user_pw_hash == correct_pw_hash ):
            print("Welcome back... your flag, user:")
            decryption = str_xor(flag_enc.decode(),word)
            print(decryption)
            return
        print("That password is incorrect")



level_3_pw_check()


# The strings below are 7 possibilities for the correct password. 
#   (Only 1 is correct)
pos_pw_list = ["f09e", "4dcf", "87ab", "dba8", "752e", "3961", "f159"]
______________________________________________________________________________________________________________________________________
diva_bs-picoctf@webshell:~$ python level3.py 
That password is incorrect
That password is incorrect
Welcome back... your flag, user:
picoCTF{m45h_fl1ng1ng_cd6ed2eb}

- All we need to do here was update the script a bit with simple logic to guess the flag.
