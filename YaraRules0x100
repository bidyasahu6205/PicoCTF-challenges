Description
Dear Threat Intelligence Analyst,
Quick heads up - we stumbled upon a shady executable file on one of our employee's Windows PCs. Good news: the employee didn't take the bait and flagged it to our InfoSec crew.
Seems like this file sneaked past our Intrusion Detection Systems, indicating a fresh threat with no matching signatures in our database.
Can you dive into this file and whip up some YARA rules? We need to make sure we catch this thing if it pops up again.
Thanks a bunch!
The suspicious file can be downloaded here. Unzip the archive with the password picoctf
Once you have created the YARA rule/signature, submit your rule file as follows:
socat -t60 - TCP:standard-pizzas.picoctf.net:58217 < sample.txt
(In the above command, modify "sample.txt" to whatever filename you use).
When you submit your rule, it will undergo testing with various test cases. If it successfully passes all the test cases, you'll receive your flag.

YARA (Yet Another Recursive Acronym) is a tool used for malware analysis, threat hunting, and identifying patterns in files. 
It's widely used in cybersecurity for writing rules that detect malware, based on textual and binary patterns found in files.

Why Use YARA?
- Detect malware families by writing signatures (rules).
- Identify packed vs. unpacked malware variants.
- Find specific API calls, strings, or structures in executables.
- Automate malware detection in SOC (Security Operations Center) workflows.

Basic YARA Rule Structure
A YARA rule looks like this:
rule ExampleRule {
    meta:
        description = "Detects Example Malware"
        author = "YourName"
        date = "2025-03-09"

    strings:
        $text1 = "malware" ascii
        $text2 = "hacking_tool" wide ascii

    condition:
        any of them
}

Meta Section – Stores metadata (e.g., author, description).
Strings Section – Defines text/binary patterns to look for.
Condition Section – Specifies how to detect the malware (e.g., if any string appears).

How to Use YARA
Install YARA
On Linux:
sudo apt install yara -y
On Windows (via Chocolatey):
choco install yara

Run a YARA Rule on a File
yara rule_file.yar target_file.exe
eg. yara suspicious_rule.yar suspicious_unpacked.exe

Use YARA for Threat Hunting
You can scan entire directories:
yara -r rule_file.yar /path/to/folder/

Where YARA is Used
- Antivirus & Threat Detection (Used by VirusTotal, FireEye, etc.)
- Malware Reverse Engineering
- SOC & Incident Response Teams
- Custom Threat Hunting in Enterprise Security

                                                                                                                                      
┌──(kali㉿kali)-[~/picoctf2025]
└─$ wget https://challenge-files.picoctf.net/c_standard_pizzas/cf61d4f4f16deb32cc624b028029eafe6cf0b5f3b58a49232cb120f0e8976f65/suspicious.zip
--2025-03-09 06:38:47--  https://challenge-files.picoctf.net/c_standard_pizzas/cf61d4f4f16deb32cc624b028029eafe6cf0b5f3b58a49232cb120f0e8976f65/suspicious.zip
Resolving challenge-files.picoctf.net (challenge-files.picoctf.net)... 52.84.205.47, 52.84.205.56, 52.84.205.110, ...
Connecting to challenge-files.picoctf.net (challenge-files.picoctf.net)|52.84.205.47|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 16506 (16K) [application/octet-stream]
Saving to: ‘suspicious.zip’

suspicious.zip                    100%[===========================================================>]  16.12K  15.2KB/s    in 1.1s    

2025-03-09 06:38:51 (15.2 KB/s) - ‘suspicious.zip’ saved [16506/16506]

                                                                                                                                      
┌──(kali㉿kali)-[~/picoctf2025]
└─$ ls    
suspicious.zip
                                                                                                                                      
┌──(kali㉿kali)-[~/picoctf2025]
└─$ unzip suspicious.zip                
Archive:  suspicious.zip
[suspicious.zip] suspicious.exe password: 
  inflating: suspicious.exe          
                                                                                                                                      
┌──(kali㉿kali)-[~/picoctf2025]
└─$ ls -la
total 56
drwxrwxr-x  2 kali kali  4096 Mar  9 06:41 .
drwx------ 22 kali kali  4096 Mar  9 06:38 ..
-rwxr-xr-x  1 kali kali 26624 Mar  5 22:27 suspicious.exe
-rw-rw-r--  1 kali kali 16506 Mar  6 15:29 suspicious.zip
──(kali㉿kali)-[~/picoctf2025]
└─$ upx -t suspicious.exe

                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2024
UPX 4.2.4       Markus Oberhumer, Laszlo Molnar & John Reiser    May 9th 2024

testing suspicious.exe [OK]

Tested 1 file.
                                                                                                                                      
┌──(kali㉿kali)-[~/picoctf2025]
└─$ upx -d suspicious.exe -o unpacked.exe

                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2024
UPX 4.2.4       Markus Oberhumer, Laszlo Molnar & John Reiser    May 9th 2024

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
     40960 <-     26624   65.00%    win32/pe     unpacked.exe

Unpacked 1 file.
                                                                                                                                      
┌──(kali㉿kali)-[~/picoctf2025]
└─$ ls    
suspicious.exe  suspicious.zip  unpacked.exe
                                                                                                                                      
┌──(kali㉿kali)-[~/picoctf2025]
└─$ ls -la                               
total 96
drwxrwxr-x  2 kali kali  4096 Mar  9 06:58 .
drwx------ 22 kali kali  4096 Mar  9 06:38 ..
-rwxr-xr-x  1 kali kali 26624 Mar  5 22:27 suspicious.exe
-rw-rw-r--  1 kali kali 16506 Mar  6 15:29 suspicious.zip
-rwxr-xr-x  1 kali kali 40960 Mar  5 22:27 unpacked.exe
                                                                                                                                      
┌──(kali㉿kali)-[~/picoctf2025]
└─$ objdump -h unpacked.exe

unpacked.exe:     file format pei-i386

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d44  00401000  00401000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rdata        00002430  00403000  00403000  00002200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000200  00406000  00406000  00004800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .rsrc         00005158  00407000  00407000  00004a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .reloc        000003a8  0040d000  0040d000  00009c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
                                                                                                                                      
┌──(kali㉿kali)-[~/picoctf2025]
└─$ strings -n 10 unpacked.exe       
!This program cannot be run in DOS mode.
        _            _____ _______ ______  
       (_)          / ____|__   __|  ____| 
  _ __  _  ___ ___ | |       | |  | |__    
 | '_ \| |/ __/ _ \| |       | |  |  __|   
 | |_) | | (_| (_) | |____   | |  | |      
 | .__/|_|\___\___/ \_____|  |_|  |_|      
 | |                                       
 |_|                                       
  Welcome to the YaraRules0x100 challenge!
                       .,,                
              ****************.         
            ***************.  .*,       
           ********,     ,*%%#(,        
           ******.  %%%%%&@@@@@@@@@%    
           *****   #%%%%%@@@@@@@@@@%%#  
    ****  ,,****  ***%%%%%%%%%%%%%%%%%  
   *****  ,,*****  ******/%%%%%%/****   
   ,,,,,  ,,******    ,*********        
   ,,,,,  ,,,*********.         .**     
   ,,,,,  ,,,,*********************     
   ,,,,,  ,,,,,,*******************     
   ,,,,,  ,,,,,,,,,,,,********,,,,,     
    ,,,,  ,,,,,,,,,,,,,,,,,,,,,,,,,     
    ,,,,  .,,,,,,,,,,,,,,,,,,,,,,,,     
           ,,,,,,,,,,       .,,,,,      
           ,,,,,,,,,       ,,,,,,,      
           ,,,,,,,,,      .,,,,,,,      
           .,,,,,,,         ,,.
NtQueryInformationProcess
Unknown exception
bad allocation
bad array new length
.rdata$sxdata
.rdata$voltmd
.rdata$zzzdbg
GetCommandLineW
OutputDebugStringW
DebugActiveProcess
DebugActiveProcessStop
CloseHandle
GetLastError
WaitForSingleObject
CreateMutexW
GetCurrentProcess
GetCurrentProcessId
TerminateProcess
GetExitCodeProcess
CreateThread
CreateProcessA
OpenProcess
GetModuleFileNameW
GetModuleHandleW
GetProcAddress
MultiByteToWideChar
WideCharToMultiByte
CreateToolhelp32Snapshot
Process32FirstW
Process32NextW
KERNEL32.DLL
LoadStringW
GetMessageW
TranslateMessage
DispatchMessageW
DefWindowProcW
PostQuitMessage
RegisterClassExW
CreateWindowExW
DestroyWindow
ShowWindow
DialogBoxParamW
LoadAcceleratorsW
TranslateAcceleratorW
UpdateWindow
BeginPaint
GetClientRect
MessageBoxW
GetDesktopWindow
LoadCursorW
USER32.dll
CreateSolidBrush
DeleteObject
SetBkColor
SetTextColor
OpenProcessToken
AdjustTokenPrivileges
LookupPrivilegeValueW
ADVAPI32.dll
CommandLineToArgvW
SHELL32.dll
__current_exception
__current_exception_context
_except_handler4_common
__std_exception_copy
__std_exception_destroy
_CxxThrowException
VCRUNTIME140.dll
__stdio_common_vsprintf
_seh_filter_exe
_set_app_type
__setusermatherr
_configure_wide_argv
_initialize_wide_environment
_get_wide_winmain_command_line
_initterm_e
_set_fmode
_register_thread_local_exe_atexit_callback
_configthreadlocale
_set_new_mode
__p__commode
_initialize_onexit_table
_register_onexit_function
_crt_atexit
_controlfp_s
api-ms-win-crt-heap-l1-1-0.dll
api-ms-win-crt-runtime-l1-1-0.dll
api-ms-win-crt-convert-l1-1-0.dll
api-ms-win-crt-stdio-l1-1-0.dll
api-ms-win-crt-math-l1-1-0.dll
api-ms-win-crt-locale-l1-1-0.dll
QueryPerformanceCounter
GetCurrentThreadId
GetSystemTimeAsFileTime
InitializeSListHead
IsDebuggerPresent
UnhandledExceptionFilter
SetUnhandledExceptionFilter
GetStartupInfoW
IsProcessorFeaturePresent
.?AVbad_alloc@std@@
.?AVexception@std@@
.?AVbad_array_new_length@std@@
.?AVtype_info@@
<?xml version='1.0' encoding='UTF-8' standalone='yes'?>
<assembly xmlns='urn:schemas-microsoft-com:asm.v1' manifestVersion='1.0'>
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
    <security>
      <requestedPrivileges>
        <requestedExecutionLevel level='asInvoker' uiAccess='false' />
      </requestedPrivileges>
    </security>
  </trustInfo>
</assembly>
0"12171=1D1]1k1{1
3>3E3P3U3]3s3{3
4"40454=4G4^4x4
5L5Y5_5h5w5
5$6*60676N6X6a6g6q6{6
7!7+737:7N7T7^7g7n7
8;8e8m8t8z8
:(:7:I:O:X:`:i:
=6>D>N>^>c>h>o>
:B:K:T:b:k:
;-;3;9;?;E;K;R;Y;`;g;n;u;|;
< <&<,<2<8<><D<J<P<V<\<b<h<n<t<z<
,20242L2P2T2h2l2p2
4(4,40484P4`4d4t4x4|4
4D8H8d8h8p8x8
                                                                                                                                      
┌──(kali㉿kali)-[~/picoctf2025]
└─$ gedit test.yara
__________________________________________________________________________________________________________________________________

yara rule draft 1
rule Banner_Detection  
{
    meta:
        author = "Your Name"
        description = "Detects ASCII banner and welcome message from YaraRules0x100"
        date = "2025-03-09"
    
    strings:
        // Welcome message
        $welcome = "Welcome to the YaraRules0x100 challenge!" wide ascii

    condition:
        $welcome
}
__________________________________________________________________________________________________________________________________
┌──(kali㉿kali)-[~/picoctf2025]
└─$ yara -r test.yara unpacked.exe                                
Banner_Detection unpacked.exe
                                 
┌──(kali㉿kali)-[~/picoctf2025]
└─$ socat -t60 - TCP:standard-pizzas.picoctf.net:58427 < test.yara 
:::::

Status: Failed
False Negatives Check: Testcase failed. Your rule generated a false negative.
False Positives Check: Testcase failed. Your rule generated a false positive.
Stats: 60 testcase(s) passed. 1 failed. 3 testcase(s) unchecked. 64 total testcases.
Pass all the testcases to get the flag.

:::::


yara rule draft 2
rule Final_Banner_Detection
{
    meta:
        author = "Your Name"
        description = "Detects the challenge executable using the welcome banner or unique substring 'YaraRules0x100'"
        date = "2025-03-09"
        version = "1.0"
    
    strings:
        // Unique substring expected in all variants
        $yara_sub = "YaraRules0x100" wide ascii

    condition:
        $yara_sub
}

┌──(kali㉿kali)-[~/picoctf2025]
└─$ socat -t60 - TCP:standard-pizzas.picoctf.net:60167 < test.yara 
:::::

Status: Failed
False Negatives Check: Testcase failed. Your rule generated a false negative.
False Positives Check: Testcase failed. Your rule generated a false positive.
Stats: 62 testcase(s) passed. 1 failed. 1 testcase(s) unchecked. 64 total testcases.
Pass all the testcases to get the flag.

:::::

yara rule draft 3
rule Final_Banner_Detection
{
    meta:
        author = "Your Name"
        description = "Detects the challenge executable via its unique banner or API/manifest tokens."
        date = "2025-03-09"
        version = "1.3"
    
    strings:
        // Unique banner string in both plain and wide encodings.
        $banner_plain = "YaraRules0x100"
        $banner_wide  = "YaraRules0x100" wide ascii
        
        // API calls that may appear in the packed variant.
        $getcmd   = "GetCommandLineW"
        $get_wide = "_get_wide_winmain_command_line"
        
        // Manifest token from the embedded XML.
        $manifest = "<requestedExecutionLevel level='asInvoker' uiAccess='false' />"
    
    condition:
        uint16(0) == 0x5A4D and (
            ($banner_plain or $banner_wide) or
            ( ($getcmd or $get_wide) and $manifest )
        )
}
┌──(kali㉿kali)-[~/picoctf2025]
└─$ socat -t60 - TCP:standard-pizzas.picoctf.net:55213 < test.yara
:::::

Status: Failed
False Negatives Check: Testcases passed!
False Positives Check: Testcase failed. Your rule generated a false positive.
Stats: 63 testcase(s) passed. 1 failed. 0 testcase(s) unchecked. 64 total testcases.
Pass all the testcases to get the flag.

:::::
FALSE POSITIVE
rule Final_Banner_Detection {
    meta:
        author = "Your Name"
        description = "Detects the challenge executable with minimal false positives."
        date = "2025-03-09"
        version = "final-optimized"
    
    strings:
        // Unique challenge identifier that appears in all variants
        $unique = "0\"12171=1D1]1k1{" wide ascii nocase

        // Banner string, used in unpacked variants
        $banner = "YaraRules0x100" wide ascii

        // API string, used in packed variants
        $api = "_get_wide_winmain_command_line" wide ascii nocase
        
    condition:
        // Ensure it’s a PE file and contains both the unique token and either the banner or API
        uint16(0) == 0x5A4D and $unique and ($banner or $api)
}

FALSE NEGATIVE 
 rule Final_Banner_Detection {
    meta:
        author = "Your Name"
        description = "Detects the challenge executable via its unique wide banner or wide API/manifest combination."
        date = "2025-03-09"
        version = "final"
    strings:
        // Unpacked variant: a unique banner string, only in wide encoding.
        $banner = "YaraRules0x100" wide ascii
        
        // Packed variant: wide API call (case-insensitive).
        $api = "_get_wide_winmain_command_line" wide ascii nocase
        
        // Packed variant: manifest token in ascii.
        $manifest = "<requestedExecutionLevel level='asInvoker' uiAccess='false' />" ascii nocase
    condition:
        // File must be a PE and match either the banner or the API/manifest combination.
        uint16(0) == 0x5A4D and ( $banner or ( $api and $manifest ) )
}
it passed all false negative that means the correct mixture of them will be the one

┌──(kali㉿kali)-[~/picoctf2025]
└─$ strings -el unpacked.exe > data
jjjjjj
jjjj
ntdll.dll
(Ignore) error related to Ntdll. Falling back.
[FATAL ERROR] CreateToolhelp32Snapshot failed.
[FATAL ERROR] OpenProcessToken failed.
SeDebugPrivilege
[FATAL ERROR] LookupPrivilegeValue failed.
[FATAL ERROR] AdjustTokenPrivileges failed.
Please run this program as an Admin.
[FATAL ERROR] Failed to create the Mutex.
[ERROR] Exactly two arguments expected by the Child process. Exiting...
Check if the program is already running.
Error converting WChar to Char.
No debugger was present. Exiting successfully.
Error opening a handle to debuggerPID.
Debugger process terminated successfully.
Failed to terminate the debugger process.
[FATAL ERROR]  Unable to create the child process.
Something went wrong.
The debugger was detected but our process wasn't able to fight it. Exiting the program.
Our process detected the debugger and was able to fight it. Don't be surprised if the debugger crashed.
picoCTF
This is a fake malware. It means no harm.
Hints:
- To develop an effective YARA rule, find any suspicious Win32 API functions that are being used by this program.
- Developing rules solely based on strings (excluding URLs, library function calls, etc.) is not a good idea, as it can lead to false positives.
- Your rules should work even if this binary is packed (or unpacked).
Good luck!
Oops! Debugger Detected. Fake malware will try to hide itself (but not really).
Error creating the thread. Exiting...
&File
iE&xit
&Help
h&About ...
About Suspicious
MS Shell Dlg
Created by Nandan Desai
Copyright (c) 2023
Suspicious
SUSPICIOUS

